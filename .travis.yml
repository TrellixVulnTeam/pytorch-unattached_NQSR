# https://travis-ci.org/pytorch/pytorch
language: c

dist: xenial

git:
  submodules: false

sudo: true

env:
  global:
    - ECR_DOMAIN=308535385114.dkr.ecr.us-east-1.amazonaws.com
    - PYTORCH_IMAGE_TAG=226
    - CAFFE2_IMAGE_TAG=189
    - SCCACHE_BUCKET=ossci-compiler-cache

matrix:
    fast_finish: true
    include:
      - env: LINT_CHECK
        language: python
        python: "2.7"
        install: pip install flake8
        script: flake8
      - env: LINT_CHECK
        language: python
        python: "3.7"
        install: pip install flake8
        script: flake8
      - env: MYPY_TYPE_CHECK
        language: python
        python: "3.6"
        install: pip install mypy mypy-extensions
        script: mypy @mypy-files.txt

      # PyTorch CPU build+test
      - name: "PyTorch - Docker: Trusty / py2.7.9"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-py2.7.9
        resources:
          gpu: false
      - name: "PyTorch - Docker: Trusty / py2.7"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-py2.7
        resources:
          gpu: false
      - name: "PyTorch - Docker: Trusty / py3.5"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-py3.5
        resources:
          gpu: false
      - name: "PyTorch - Docker: Trusty / py3.6 / gcc4.8"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-py3.6-gcc4.8
        resources:
          gpu: false
      - name: "PyTorch - Docker: Trusty / py3.6 / gcc5.4"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-py3.6-gcc5.4
        resources:
          gpu: false
      - name: "PyTorch - Docker: Trusty / py3.6 / gcc7"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-py3.6-gcc7
        resources:
          gpu: false
      - name: "PyTorch - Docker: Trusty / pynightly"
        env: BUILD_ENVIRONMENT=pytorch-linux-trusty-pynightly
        resources:
          gpu: false
      - name: "PyTorch - Docker: Xenial / py3.6 / clang5 / asan"
        env: BUILD_ENVIRONMENT=pytorch-linux-xenial-py3-clang5-asan
        resources:
          gpu: false

      # PyTorch CUDA build+test
      - name: "PyTorch - Docker: Xenial / cuda8 / cudnn6 / py3"
        env:
          - BUILD_ENVIRONMENT=pytorch-linux-xenial-cuda8-cudnn6-py3
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true
      - name: "PyTorch - Docker: Xenial / cuda9 / cudnn7 / py2"
        env:
          - BUILD_ENVIRONMENT=pytorch-linux-xenial-cuda9-cudnn7-py2
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true
      - name: "PyTorch - Docker: Xenial / cuda9 / cudnn7 / py3"
        env:
          - BUILD_ENVIRONMENT=pytorch-linux-xenial-cuda9-cudnn7-py3
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true
      - name: "PyTorch - Docker: Xenial / cuda9.2 / cudnn7 / py3 / gcc7"
        env:
          - BUILD_ENVIRONMENT=pytorch-linux-xenial-cuda9.2-cudnn7-py3-gcc7
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true

      # We are not running PyTorch macOS builds on Travis currently
      # - name: "Mac: 10.13 / py3"
      #   env: BUILD_ENVIRONMENT=pytorch-macos-10.13-py3
      #   os: osx
      #   install: skip
      #   script:
      #     - export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
      #     - ls /Applications
      #     - .jenkins/pytorch/macos-build.sh
      # - pytorch_macos_10_13_py3_build
      # - pytorch_macos_10_13_py3_test:
      #     requires:
      #       - pytorch_macos_10_13_py3_build
      # - pytorch_macos_10_13_cuda9_2_cudnn7_py3_build

      # Caffe2 CPU build+test
      - name: "Caffe2 - Docker: Xenial / py2 / mkl"
        env:
          - BUILD_ENVIRONMENT=py2-mkl-ubuntu16.04
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Trusty / py2 / gcc4.8"
        env:
          - BUILD_ENVIRONMENT=py2-gcc4.8-ubuntu14.04
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / py2 / gcc5 / onnx"
        env:
          - BUILD_ENVIRONMENT=onnx-py2-gcc5-ubuntu16.04
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / conda2"
        env:
          - BUILD_ENVIRONMENT=conda2-ubuntu16.04
        resources:
          gpu: false

      # Caffe2 CUDA build+test
      - name: "Caffe2 - Docker: Xenial / cuda8 / cudnn6 / py2"
        env:
          - BUILD_ENVIRONMENT=py2-cuda8.0-cudnn6-ubuntu16.04
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true
      - name: "Caffe2 - Docker: Xenial / cuda9 / cudnn7 / py2"
        env:
          - BUILD_ENVIRONMENT=py2-cuda9.0-cudnn7-ubuntu16.04
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true
      - name: "Caffe2 - Docker: Xenial / cuda9 / cudnn7 / py2 / aten"
        env:
          - BUILD_ENVIRONMENT=py2-cuda9.0-cudnn7-aten-ubuntu16.04
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true
      - name: "Caffe2 - Docker: Xenial / cuda9.1 / cudnn7 / py2"
        env:
          - BUILD_ENVIRONMENT=py2-cuda9.1-cudnn7-ubuntu16.04
          - NEED_CUDA_DOCKER=1
        resources:
          gpu: true

      # Caffe2 CPU build only
      - name: "Caffe2 - Docker: Trusty / py2 / gcc4.9"
        env:
          - BUILD_ENVIRONMENT=py2-gcc4.9-ubuntu14.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / py2 / clang3.8"
        env:
          - BUILD_ENVIRONMENT=py2-clang3.8-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / py2 / clang3.9"
        env:
          - BUILD_ENVIRONMENT=py2-clang3.9-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / py2 / gcc6"
        env:
          - BUILD_ENVIRONMENT=py2-gcc6-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / py2 / gcc7"
        env:
          - BUILD_ENVIRONMENT=py2-gcc7-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / py2 / android"
        env:
          - BUILD_ENVIRONMENT=py2-android-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false

      # Caffe2 CUDA build only
      - name: "Caffe2 - Docker: Xenial / cuda8 / cudnn7 / py2"
        env:
          - BUILD_ENVIRONMENT=py2-cuda8.0-cudnn7-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / cuda8 / cudnn7 / py2 / aten"
        env:
          - BUILD_ENVIRONMENT=py2-cuda8.0-cudnn7-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: Xenial / cuda9 / cudnn7 / conda3"
        env:
          - BUILD_ENVIRONMENT=conda3-cuda9.0-cudnn7-ubuntu16.04
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false
      - name: "Caffe2 - Docker: CentOS7 / cuda9 / cudnn7 / py2"
        env:
          - BUILD_ENVIRONMENT=py2-cuda9.0-cudnn7-centos7
          - CAFFE2_BUILD_ONLY=1
        resources:
          gpu: false

      # We are not running Caffe2 macOS builds on Travis currently
      # - caffe2_py2_ios_macos10_13_build
      # - caffe2_py2_system_macos10_13_build
      # - caffe2_conda2_macos10_13_build

install:
  - sudo pip install awscli
  - |
    if [ -n "${NEED_CUDA_DOCKER}" ]; then
      curl -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
      echo "deb https://nvidia.github.io/libnvidia-container/ubuntu14.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
      echo "deb https://nvidia.github.io/nvidia-container-runtime/ubuntu14.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
      echo "deb https://nvidia.github.io/nvidia-docker/ubuntu14.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
    fi
  - sudo apt-get update
  - sudo apt-get install linux-headers-$(uname -r)
  - |
    if [ -n "${NEED_CUDA_DOCKER}" ]; then
      wget 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-396.26.run'
      sudo /bin/bash ./NVIDIA-Linux-x86_64-396.26.run -s
      sudo apt-get install -y nvidia-docker2
    fi
  - sudo pkill -SIGHUP dockerd
  - |
    if [ -n "${NEED_CUDA_DOCKER}" ]; then
      nvidia-smi
    fi
  - eval $(aws ecr get-login --region us-east-1 --no-include-email) # needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  - |
    if [[ ${BUILD_ENVIRONMENT} == "pytorch-"* ]]; then  # PyTorch build
      export IMAGE_TAG=${PYTORCH_IMAGE_TAG}
    else  # Caffe2 build
      export IMAGE_TAG=${CAFFE2_IMAGE_TAG}
    fi
  - echo "$ECR_DOMAIN/pytorch/$BUILD_ENVIRONMENT:$IMAGE_TAG"
  - docker pull "$ECR_DOMAIN/pytorch/$BUILD_ENVIRONMENT:$IMAGE_TAG"
script:
  - |
    if [[ ${BUILD_ENVIRONMENT} == "pytorch-"* ]]; then  # PyTorch build
      export IMAGE_TAG=${PYTORCH_IMAGE_TAG}
    else  # Caffe2 build
      export IMAGE_TAG=${CAFFE2_IMAGE_TAG}
    fi
  - |
    if [ -n "${NEED_CUDA_DOCKER}" ]; then
      id=$(docker run --runtime=nvidia -t -d -w /var/lib/jenkins "$ECR_DOMAIN/pytorch/$BUILD_ENVIRONMENT:$IMAGE_TAG")
    else
      id=$(docker run -t -d -w /var/lib/jenkins "$ECR_DOMAIN/pytorch/$BUILD_ENVIRONMENT:$IMAGE_TAG")
    fi
  - echo "declare -x SCCACHE_BUCKET=${SCCACHE_BUCKET}" > $TRAVIS_BUILD_DIR/env
  - # This IAM user allows write access to S3 bucket for sccache
  - echo "declare -x AWS_ACCESS_KEY_ID=AKIAI62M6LXUOP4I4UZA" >> $TRAVIS_BUILD_DIR/env
  - echo "declare -x AWS_SECRET_ACCESS_KEY=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" >> $TRAVIS_BUILD_DIR/env
  - echo "declare -x BUILD_ENVIRONMENT=${BUILD_ENVIRONMENT}" >> $TRAVIS_BUILD_DIR/env
  - export MAX_JOBS=`expr $(nproc) - 1`
  - echo "declare -x MAX_JOBS=${MAX_JOBS}" >> $TRAVIS_BUILD_DIR/env
  - echo "declare -x TORCH_CUDA_ARCH_LIST=6.0" >> $TRAVIS_BUILD_DIR/env
  - |
    if [[ ${BUILD_ENVIRONMENT} != "pytorch-"* ]]; then  # Caffe2 build
      cat >$TRAVIS_BUILD_DIR/caffe2_ci_build_script.sh <<EOL
      set -ex

      # Need to checkout fetch PRs for onnxbot tracking PRs
      git submodule update --init third_party/onnx || true
      cd third_party/onnx && git fetch --tags --progress origin +refs/pull/*:refs/remotes/origin/pr/* && cd -

      # Reinitialize submodules
      git submodule update --init --recursive

      # Ensure jenkins can write to the ccache root dir.
      sudo chown jenkins:jenkins "${HOME}/.ccache"

      # Make ccache log to the workspace, so we can archive it after the build
      mkdir -p build
      ccache -o log_file=$PWD/build/ccache.log

      # Configure additional cmake arguments
      cmake_args=()
      cmake_args+=("$CMAKE_ARGS")

      if [[ $BUILD_ENVIRONMENT == *aten* ]]; then
        cmake_args+=("-DBUILD_ATEN=ON")
      fi

      # conda must be added to the path for Anaconda builds (this location must be
      # the same as that in install_anaconda.sh used to build the docker image)
      if [[ "${BUILD_ENVIRONMENT}" == conda* ]]; then
        export PATH=/opt/conda/bin:$PATH
        sudo chown -R jenkins:jenkins '/opt/conda'
      fi

      # Build
      if test -x ".jenkins/caffe2/build.sh"; then
        ./.jenkins/caffe2/build.sh ${cmake_args[@]}
      else
        ./.jenkins/build.sh ${cmake_args[@]}
      fi

      # Show sccache stats if it is running
      if pgrep sccache > /dev/null; then
        sccache --show-stats
      fi

      EOL
      chmod +x $TRAVIS_BUILD_DIR/caffe2_ci_build_script.sh
      cat >$TRAVIS_BUILD_DIR/caffe2_ci_test_script.sh << EOL
      set -ex

      # libdc1394 (dependency of OpenCV) expects /dev/raw1394 to exist...
      sudo ln /dev/null /dev/raw1394

      # conda must be added to the path for Anaconda builds (this location must be
      # the same as that in install_anaconda.sh used to build the docker image)
      if [[ "${BUILD_ENVIRONMENT}" == conda* ]]; then
        export PATH=/opt/conda/bin:$PATH
      fi

      pip install --user --no-cache-dir hypothesis==3.59.0
      pip install --user -b /tmp/pip_install_onnx "file:///var/lib/jenkins/workspace/third_party/onnx#egg=onnx"

      # Hotfix, use hypothesis 3.44.6 on Ubuntu 14.04
      # See comments on https://github.com/HypothesisWorks/hypothesis-python/commit/eadd62e467d6cee6216e71b391951ec25b4f5830
      if [[ "$BUILD_ENVIRONMENT" == *ubuntu14.04* ]]; then
        sudo pip uninstall -y hypothesis
        sudo pip install hypothesis==3.44.6
      fi

      # Build
      if test -x ".jenkins/caffe2/test.sh"; then
        ./.jenkins/caffe2/test.sh
      else
        ./.jenkins/test.sh
      fi

      # Remove benign core dumps.
      # These are tests for signal handling (including SIGABRT).
      rm -f ./crash/core.fatal_signal_as.*
      rm -f ./crash/core.logging_test.*

      EOL
      chmod +x $TRAVIS_BUILD_DIR/caffe2_ci_test_script.sh
    fi
  - docker cp "$TRAVIS_BUILD_DIR/." "$id:/var/lib/jenkins/workspace"
  - |
    if [[ ${BUILD_ENVIRONMENT} == "pytorch-"* ]]; then  # PyTorch build
      (echo "source ./workspace/env" && echo 'sudo chown -R jenkins workspace && cd workspace && git submodule update --init && .jenkins/pytorch/build.sh && .jenkins/pytorch/test.sh') | docker exec -u jenkins -i "$id" bash
    else
      (echo "source ./workspace/env" && echo 'sudo chown -R jenkins workspace && cd workspace && git submodule update --init && ./caffe2_ci_build_script.sh && if [ -z "${CAFFE2_BUILD_ONLY}" ]; then ./caffe2_ci_test_script.sh; fi') | docker exec -u jenkins -i "$id" bash
    fi
